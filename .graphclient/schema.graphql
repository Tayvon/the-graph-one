schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
Collection

"""
type Collection {
  """ID (collection address)"""
  id: ID!
  """Total number of transactions"""
  totalTransactions: BigInt!
  """Total number of taker bid transactions"""
  totalTakerBidTransactions: BigInt!
  """Total number of taker ask transactions"""
  totalTakerAskTransactions: BigInt!
  """Total volume of collection (in ETH)"""
  totalVolume: BigDecimal!
  """Total taker bid volume (in ETH)"""
  totalTakerBidVolume: BigDecimal!
  """Total taker ask volume (in ETH)"""
  totalTakerAskVolume: BigDecimal!
  """Total royalty paid (in ETH)"""
  totalRoyaltyPaid: BigDecimal!
  """Daily history"""
  dayData(skip: Int = 0, first: Int = 100, orderBy: CollectionDailyData_orderBy, orderDirection: OrderDirection, where: CollectionDailyData_filter): [CollectionDailyData!]!
  """Royalty transfers"""
  royaltyTransfers(skip: Int = 0, first: Int = 100, orderBy: RoyaltyTransfer_orderBy, orderDirection: OrderDirection, where: RoyaltyTransfer_filter): [RoyaltyTransfer!]!
  """Transactions"""
  transactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
}

"""
CollectionDailyData

"""
type CollectionDailyData {
  """ID"""
  id: ID!
  """Start date (timestamp)"""
  date: BigInt!
  """Collection"""
  collection: Collection!
  """Daily unique transactions"""
  dailyTransactions: BigInt!
  """Daily unique taker bid transactions"""
  dailyTakerBidTransactions: BigInt!
  """Daily unique taker ask transactions"""
  dailyTakerAskTransactions: BigInt!
  """Daily volume (in ETH)"""
  dailyVolume: BigDecimal!
  """Daily taker bid volume (in ETH)"""
  dailyTakerBidVolume: BigDecimal!
  """Daily taker ask volume (in ETH)"""
  dailyTakerAskVolume: BigDecimal!
  """Daily volume (in ETH) excluding zero-fee strategy"""
  dailyVolumeExcludingZeroFee: BigDecimal!
  """Royalty payment (in ETH)"""
  dailyRoyalty: BigDecimal!
}

input CollectionDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: Collection_filter
  dailyTransactions: BigInt
  dailyTransactions_not: BigInt
  dailyTransactions_gt: BigInt
  dailyTransactions_lt: BigInt
  dailyTransactions_gte: BigInt
  dailyTransactions_lte: BigInt
  dailyTransactions_in: [BigInt!]
  dailyTransactions_not_in: [BigInt!]
  dailyTakerBidTransactions: BigInt
  dailyTakerBidTransactions_not: BigInt
  dailyTakerBidTransactions_gt: BigInt
  dailyTakerBidTransactions_lt: BigInt
  dailyTakerBidTransactions_gte: BigInt
  dailyTakerBidTransactions_lte: BigInt
  dailyTakerBidTransactions_in: [BigInt!]
  dailyTakerBidTransactions_not_in: [BigInt!]
  dailyTakerAskTransactions: BigInt
  dailyTakerAskTransactions_not: BigInt
  dailyTakerAskTransactions_gt: BigInt
  dailyTakerAskTransactions_lt: BigInt
  dailyTakerAskTransactions_gte: BigInt
  dailyTakerAskTransactions_lte: BigInt
  dailyTakerAskTransactions_in: [BigInt!]
  dailyTakerAskTransactions_not_in: [BigInt!]
  dailyVolume: BigDecimal
  dailyVolume_not: BigDecimal
  dailyVolume_gt: BigDecimal
  dailyVolume_lt: BigDecimal
  dailyVolume_gte: BigDecimal
  dailyVolume_lte: BigDecimal
  dailyVolume_in: [BigDecimal!]
  dailyVolume_not_in: [BigDecimal!]
  dailyTakerBidVolume: BigDecimal
  dailyTakerBidVolume_not: BigDecimal
  dailyTakerBidVolume_gt: BigDecimal
  dailyTakerBidVolume_lt: BigDecimal
  dailyTakerBidVolume_gte: BigDecimal
  dailyTakerBidVolume_lte: BigDecimal
  dailyTakerBidVolume_in: [BigDecimal!]
  dailyTakerBidVolume_not_in: [BigDecimal!]
  dailyTakerAskVolume: BigDecimal
  dailyTakerAskVolume_not: BigDecimal
  dailyTakerAskVolume_gt: BigDecimal
  dailyTakerAskVolume_lt: BigDecimal
  dailyTakerAskVolume_gte: BigDecimal
  dailyTakerAskVolume_lte: BigDecimal
  dailyTakerAskVolume_in: [BigDecimal!]
  dailyTakerAskVolume_not_in: [BigDecimal!]
  dailyVolumeExcludingZeroFee: BigDecimal
  dailyVolumeExcludingZeroFee_not: BigDecimal
  dailyVolumeExcludingZeroFee_gt: BigDecimal
  dailyVolumeExcludingZeroFee_lt: BigDecimal
  dailyVolumeExcludingZeroFee_gte: BigDecimal
  dailyVolumeExcludingZeroFee_lte: BigDecimal
  dailyVolumeExcludingZeroFee_in: [BigDecimal!]
  dailyVolumeExcludingZeroFee_not_in: [BigDecimal!]
  dailyRoyalty: BigDecimal
  dailyRoyalty_not: BigDecimal
  dailyRoyalty_gt: BigDecimal
  dailyRoyalty_lt: BigDecimal
  dailyRoyalty_gte: BigDecimal
  dailyRoyalty_lte: BigDecimal
  dailyRoyalty_in: [BigDecimal!]
  dailyRoyalty_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum CollectionDailyData_orderBy {
  id
  date
  collection
  dailyTransactions
  dailyTakerBidTransactions
  dailyTakerAskTransactions
  dailyVolume
  dailyTakerBidVolume
  dailyTakerAskVolume
  dailyVolumeExcludingZeroFee
  dailyRoyalty
}

input Collection_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalTransactions: BigInt
  totalTransactions_not: BigInt
  totalTransactions_gt: BigInt
  totalTransactions_lt: BigInt
  totalTransactions_gte: BigInt
  totalTransactions_lte: BigInt
  totalTransactions_in: [BigInt!]
  totalTransactions_not_in: [BigInt!]
  totalTakerBidTransactions: BigInt
  totalTakerBidTransactions_not: BigInt
  totalTakerBidTransactions_gt: BigInt
  totalTakerBidTransactions_lt: BigInt
  totalTakerBidTransactions_gte: BigInt
  totalTakerBidTransactions_lte: BigInt
  totalTakerBidTransactions_in: [BigInt!]
  totalTakerBidTransactions_not_in: [BigInt!]
  totalTakerAskTransactions: BigInt
  totalTakerAskTransactions_not: BigInt
  totalTakerAskTransactions_gt: BigInt
  totalTakerAskTransactions_lt: BigInt
  totalTakerAskTransactions_gte: BigInt
  totalTakerAskTransactions_lte: BigInt
  totalTakerAskTransactions_in: [BigInt!]
  totalTakerAskTransactions_not_in: [BigInt!]
  totalVolume: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_lt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_not_in: [BigDecimal!]
  totalTakerBidVolume: BigDecimal
  totalTakerBidVolume_not: BigDecimal
  totalTakerBidVolume_gt: BigDecimal
  totalTakerBidVolume_lt: BigDecimal
  totalTakerBidVolume_gte: BigDecimal
  totalTakerBidVolume_lte: BigDecimal
  totalTakerBidVolume_in: [BigDecimal!]
  totalTakerBidVolume_not_in: [BigDecimal!]
  totalTakerAskVolume: BigDecimal
  totalTakerAskVolume_not: BigDecimal
  totalTakerAskVolume_gt: BigDecimal
  totalTakerAskVolume_lt: BigDecimal
  totalTakerAskVolume_gte: BigDecimal
  totalTakerAskVolume_lte: BigDecimal
  totalTakerAskVolume_in: [BigDecimal!]
  totalTakerAskVolume_not_in: [BigDecimal!]
  totalRoyaltyPaid: BigDecimal
  totalRoyaltyPaid_not: BigDecimal
  totalRoyaltyPaid_gt: BigDecimal
  totalRoyaltyPaid_lt: BigDecimal
  totalRoyaltyPaid_gte: BigDecimal
  totalRoyaltyPaid_lte: BigDecimal
  totalRoyaltyPaid_in: [BigDecimal!]
  totalRoyaltyPaid_not_in: [BigDecimal!]
  dayData_: CollectionDailyData_filter
  royaltyTransfers_: RoyaltyTransfer_filter
  transactions_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Collection_orderBy {
  id
  totalTransactions
  totalTakerBidTransactions
  totalTakerAskTransactions
  totalVolume
  totalTakerBidVolume
  totalTakerAskVolume
  totalRoyaltyPaid
  dayData
  royaltyTransfers
  transactions
}

"""
ExchangeDailyData

"""
type ExchangeDailyData {
  """ID"""
  id: ID!
  """Start date (timestamp)"""
  date: BigInt!
  """Daily unique users"""
  dailyUsers: BigInt!
  """Daily unique collections traded"""
  dailyCollections: BigInt!
  """Daily unique transactions"""
  dailyTransactions: BigInt!
  """Daily taker ask transactions"""
  dailyTakerBidTransactions: BigInt!
  """Daily taker ask transactions"""
  dailyTakerAskTransactions: BigInt!
  """Daily volume (in ETH)"""
  dailyVolume: BigDecimal!
  """Daily taker bid volume (in ETH)"""
  dailyTakerBidVolume: BigDecimal!
  """Daily taker ask volume (in ETH)"""
  dailyTakerAskVolume: BigDecimal!
  """Daily volume (in ETH) excluding zero-fee strategy"""
  dailyVolumeExcludingZeroFee: BigDecimal!
}

input ExchangeDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  dailyUsers: BigInt
  dailyUsers_not: BigInt
  dailyUsers_gt: BigInt
  dailyUsers_lt: BigInt
  dailyUsers_gte: BigInt
  dailyUsers_lte: BigInt
  dailyUsers_in: [BigInt!]
  dailyUsers_not_in: [BigInt!]
  dailyCollections: BigInt
  dailyCollections_not: BigInt
  dailyCollections_gt: BigInt
  dailyCollections_lt: BigInt
  dailyCollections_gte: BigInt
  dailyCollections_lte: BigInt
  dailyCollections_in: [BigInt!]
  dailyCollections_not_in: [BigInt!]
  dailyTransactions: BigInt
  dailyTransactions_not: BigInt
  dailyTransactions_gt: BigInt
  dailyTransactions_lt: BigInt
  dailyTransactions_gte: BigInt
  dailyTransactions_lte: BigInt
  dailyTransactions_in: [BigInt!]
  dailyTransactions_not_in: [BigInt!]
  dailyTakerBidTransactions: BigInt
  dailyTakerBidTransactions_not: BigInt
  dailyTakerBidTransactions_gt: BigInt
  dailyTakerBidTransactions_lt: BigInt
  dailyTakerBidTransactions_gte: BigInt
  dailyTakerBidTransactions_lte: BigInt
  dailyTakerBidTransactions_in: [BigInt!]
  dailyTakerBidTransactions_not_in: [BigInt!]
  dailyTakerAskTransactions: BigInt
  dailyTakerAskTransactions_not: BigInt
  dailyTakerAskTransactions_gt: BigInt
  dailyTakerAskTransactions_lt: BigInt
  dailyTakerAskTransactions_gte: BigInt
  dailyTakerAskTransactions_lte: BigInt
  dailyTakerAskTransactions_in: [BigInt!]
  dailyTakerAskTransactions_not_in: [BigInt!]
  dailyVolume: BigDecimal
  dailyVolume_not: BigDecimal
  dailyVolume_gt: BigDecimal
  dailyVolume_lt: BigDecimal
  dailyVolume_gte: BigDecimal
  dailyVolume_lte: BigDecimal
  dailyVolume_in: [BigDecimal!]
  dailyVolume_not_in: [BigDecimal!]
  dailyTakerBidVolume: BigDecimal
  dailyTakerBidVolume_not: BigDecimal
  dailyTakerBidVolume_gt: BigDecimal
  dailyTakerBidVolume_lt: BigDecimal
  dailyTakerBidVolume_gte: BigDecimal
  dailyTakerBidVolume_lte: BigDecimal
  dailyTakerBidVolume_in: [BigDecimal!]
  dailyTakerBidVolume_not_in: [BigDecimal!]
  dailyTakerAskVolume: BigDecimal
  dailyTakerAskVolume_not: BigDecimal
  dailyTakerAskVolume_gt: BigDecimal
  dailyTakerAskVolume_lt: BigDecimal
  dailyTakerAskVolume_gte: BigDecimal
  dailyTakerAskVolume_lte: BigDecimal
  dailyTakerAskVolume_in: [BigDecimal!]
  dailyTakerAskVolume_not_in: [BigDecimal!]
  dailyVolumeExcludingZeroFee: BigDecimal
  dailyVolumeExcludingZeroFee_not: BigDecimal
  dailyVolumeExcludingZeroFee_gt: BigDecimal
  dailyVolumeExcludingZeroFee_lt: BigDecimal
  dailyVolumeExcludingZeroFee_gte: BigDecimal
  dailyVolumeExcludingZeroFee_lte: BigDecimal
  dailyVolumeExcludingZeroFee_in: [BigDecimal!]
  dailyVolumeExcludingZeroFee_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ExchangeDailyData_orderBy {
  id
  date
  dailyUsers
  dailyCollections
  dailyTransactions
  dailyTakerBidTransactions
  dailyTakerAskTransactions
  dailyVolume
  dailyTakerBidVolume
  dailyTakerAskVolume
  dailyVolumeExcludingZeroFee
}

"""
ExecutionStrategy

"""
type ExecutionStrategy {
  """ID (execution strategy address)"""
  id: ID!
  """Protocol fee (e.g., 500 --> 5%)"""
  protocolFee: BigInt!
  """Total number of transactions"""
  totalTransactions: BigInt!
  """Total number of taker bid transactions"""
  totalTakerBidTransactions: BigInt!
  """Total number of taker ask transactions"""
  totalTakerAskTransactions: BigInt!
  """Total volume (in ETH)"""
  totalVolume: BigDecimal!
  """Total taker bid volume (in ETH)"""
  totalTakerBidVolume: BigDecimal!
  """Total taker ask volume (in ETH)"""
  totalTakerAskVolume: BigDecimal!
  """Daily history"""
  dayData(skip: Int = 0, first: Int = 100, orderBy: ExecutionStrategyDailyData_orderBy, orderDirection: OrderDirection, where: ExecutionStrategyDailyData_filter): [ExecutionStrategyDailyData!]!
  """Transactions"""
  transactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
}

"""
ExecutionStrategyDailyData

"""
type ExecutionStrategyDailyData {
  """ID"""
  id: ID!
  """Execution strategy"""
  strategy: ExecutionStrategy!
  """Start date (timestamp)"""
  date: BigInt!
  """Daily unique transactions"""
  dailyTransactions: BigInt!
  """Daily unique taker bid transactions"""
  dailyTakerBidTransactions: BigInt!
  """Daily unique taker bid transactions"""
  dailyTakerAskTransactions: BigInt!
  """Daily volume (in ETH)"""
  dailyVolume: BigDecimal!
  """Daily taker bid volume (in ETH)"""
  dailyTakerBidVolume: BigDecimal!
  """Daily taker ask volume (in ETH)"""
  dailyTakerAskVolume: BigDecimal!
}

input ExecutionStrategyDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  strategy: String
  strategy_not: String
  strategy_gt: String
  strategy_lt: String
  strategy_gte: String
  strategy_lte: String
  strategy_in: [String!]
  strategy_not_in: [String!]
  strategy_contains: String
  strategy_contains_nocase: String
  strategy_not_contains: String
  strategy_not_contains_nocase: String
  strategy_starts_with: String
  strategy_starts_with_nocase: String
  strategy_not_starts_with: String
  strategy_not_starts_with_nocase: String
  strategy_ends_with: String
  strategy_ends_with_nocase: String
  strategy_not_ends_with: String
  strategy_not_ends_with_nocase: String
  strategy_: ExecutionStrategy_filter
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  dailyTransactions: BigInt
  dailyTransactions_not: BigInt
  dailyTransactions_gt: BigInt
  dailyTransactions_lt: BigInt
  dailyTransactions_gte: BigInt
  dailyTransactions_lte: BigInt
  dailyTransactions_in: [BigInt!]
  dailyTransactions_not_in: [BigInt!]
  dailyTakerBidTransactions: BigInt
  dailyTakerBidTransactions_not: BigInt
  dailyTakerBidTransactions_gt: BigInt
  dailyTakerBidTransactions_lt: BigInt
  dailyTakerBidTransactions_gte: BigInt
  dailyTakerBidTransactions_lte: BigInt
  dailyTakerBidTransactions_in: [BigInt!]
  dailyTakerBidTransactions_not_in: [BigInt!]
  dailyTakerAskTransactions: BigInt
  dailyTakerAskTransactions_not: BigInt
  dailyTakerAskTransactions_gt: BigInt
  dailyTakerAskTransactions_lt: BigInt
  dailyTakerAskTransactions_gte: BigInt
  dailyTakerAskTransactions_lte: BigInt
  dailyTakerAskTransactions_in: [BigInt!]
  dailyTakerAskTransactions_not_in: [BigInt!]
  dailyVolume: BigDecimal
  dailyVolume_not: BigDecimal
  dailyVolume_gt: BigDecimal
  dailyVolume_lt: BigDecimal
  dailyVolume_gte: BigDecimal
  dailyVolume_lte: BigDecimal
  dailyVolume_in: [BigDecimal!]
  dailyVolume_not_in: [BigDecimal!]
  dailyTakerBidVolume: BigDecimal
  dailyTakerBidVolume_not: BigDecimal
  dailyTakerBidVolume_gt: BigDecimal
  dailyTakerBidVolume_lt: BigDecimal
  dailyTakerBidVolume_gte: BigDecimal
  dailyTakerBidVolume_lte: BigDecimal
  dailyTakerBidVolume_in: [BigDecimal!]
  dailyTakerBidVolume_not_in: [BigDecimal!]
  dailyTakerAskVolume: BigDecimal
  dailyTakerAskVolume_not: BigDecimal
  dailyTakerAskVolume_gt: BigDecimal
  dailyTakerAskVolume_lt: BigDecimal
  dailyTakerAskVolume_gte: BigDecimal
  dailyTakerAskVolume_lte: BigDecimal
  dailyTakerAskVolume_in: [BigDecimal!]
  dailyTakerAskVolume_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ExecutionStrategyDailyData_orderBy {
  id
  strategy
  date
  dailyTransactions
  dailyTakerBidTransactions
  dailyTakerAskTransactions
  dailyVolume
  dailyTakerBidVolume
  dailyTakerAskVolume
}

input ExecutionStrategy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocolFee: BigInt
  protocolFee_not: BigInt
  protocolFee_gt: BigInt
  protocolFee_lt: BigInt
  protocolFee_gte: BigInt
  protocolFee_lte: BigInt
  protocolFee_in: [BigInt!]
  protocolFee_not_in: [BigInt!]
  totalTransactions: BigInt
  totalTransactions_not: BigInt
  totalTransactions_gt: BigInt
  totalTransactions_lt: BigInt
  totalTransactions_gte: BigInt
  totalTransactions_lte: BigInt
  totalTransactions_in: [BigInt!]
  totalTransactions_not_in: [BigInt!]
  totalTakerBidTransactions: BigInt
  totalTakerBidTransactions_not: BigInt
  totalTakerBidTransactions_gt: BigInt
  totalTakerBidTransactions_lt: BigInt
  totalTakerBidTransactions_gte: BigInt
  totalTakerBidTransactions_lte: BigInt
  totalTakerBidTransactions_in: [BigInt!]
  totalTakerBidTransactions_not_in: [BigInt!]
  totalTakerAskTransactions: BigInt
  totalTakerAskTransactions_not: BigInt
  totalTakerAskTransactions_gt: BigInt
  totalTakerAskTransactions_lt: BigInt
  totalTakerAskTransactions_gte: BigInt
  totalTakerAskTransactions_lte: BigInt
  totalTakerAskTransactions_in: [BigInt!]
  totalTakerAskTransactions_not_in: [BigInt!]
  totalVolume: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_lt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_not_in: [BigDecimal!]
  totalTakerBidVolume: BigDecimal
  totalTakerBidVolume_not: BigDecimal
  totalTakerBidVolume_gt: BigDecimal
  totalTakerBidVolume_lt: BigDecimal
  totalTakerBidVolume_gte: BigDecimal
  totalTakerBidVolume_lte: BigDecimal
  totalTakerBidVolume_in: [BigDecimal!]
  totalTakerBidVolume_not_in: [BigDecimal!]
  totalTakerAskVolume: BigDecimal
  totalTakerAskVolume_not: BigDecimal
  totalTakerAskVolume_gt: BigDecimal
  totalTakerAskVolume_lt: BigDecimal
  totalTakerAskVolume_gte: BigDecimal
  totalTakerAskVolume_lte: BigDecimal
  totalTakerAskVolume_in: [BigDecimal!]
  totalTakerAskVolume_not_in: [BigDecimal!]
  dayData_: ExecutionStrategyDailyData_filter
  transactions_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ExecutionStrategy_orderBy {
  id
  protocolFee
  totalTransactions
  totalTakerBidTransactions
  totalTakerAskTransactions
  totalVolume
  totalTakerBidVolume
  totalTakerAskVolume
  dayData
  transactions
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: Collection_orderBy
    orderDirection: OrderDirection
    where: Collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collection!]!
  executionStrategy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExecutionStrategy
  executionStrategies(
    skip: Int = 0
    first: Int = 100
    orderBy: ExecutionStrategy_orderBy
    orderDirection: OrderDirection
    where: ExecutionStrategy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExecutionStrategy!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  collectionDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollectionDailyData
  collectionDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CollectionDailyData_orderBy
    orderDirection: OrderDirection
    where: CollectionDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollectionDailyData!]!
  exchangeDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExchangeDailyData
  exchangeDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ExchangeDailyData_orderBy
    orderDirection: OrderDirection
    where: ExchangeDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExchangeDailyData!]!
  executionStrategyDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExecutionStrategyDailyData
  executionStrategyDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ExecutionStrategyDailyData_orderBy
    orderDirection: OrderDirection
    where: ExecutionStrategyDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExecutionStrategyDailyData!]!
  userDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserDailyData
  userDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: UserDailyData_orderBy
    orderDirection: OrderDirection
    where: UserDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserDailyData!]!
  royaltyTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RoyaltyTransfer
  royaltyTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: RoyaltyTransfer_orderBy
    orderDirection: OrderDirection
    where: RoyaltyTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RoyaltyTransfer!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
RoyaltyTransfer

"""
type RoyaltyTransfer {
  """ID"""
  id: ID!
  """Date (timestamp)"""
  date: BigInt!
  """Block number"""
  block: BigInt!
  """Collection"""
  collection: Collection!
  """TokenId"""
  tokenId: BigInt!
  """User"""
  user: User!
  """Amount received (in ETH)"""
  amount: BigDecimal!
}

input RoyaltyTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: Collection_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum RoyaltyTransfer_orderBy {
  id
  date
  block
  collection
  tokenId
  user
  amount
}

type Subscription {
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: Collection_orderBy
    orderDirection: OrderDirection
    where: Collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collection!]!
  executionStrategy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExecutionStrategy
  executionStrategies(
    skip: Int = 0
    first: Int = 100
    orderBy: ExecutionStrategy_orderBy
    orderDirection: OrderDirection
    where: ExecutionStrategy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExecutionStrategy!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  collectionDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollectionDailyData
  collectionDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CollectionDailyData_orderBy
    orderDirection: OrderDirection
    where: CollectionDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollectionDailyData!]!
  exchangeDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExchangeDailyData
  exchangeDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ExchangeDailyData_orderBy
    orderDirection: OrderDirection
    where: ExchangeDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExchangeDailyData!]!
  executionStrategyDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExecutionStrategyDailyData
  executionStrategyDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ExecutionStrategyDailyData_orderBy
    orderDirection: OrderDirection
    where: ExecutionStrategyDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExecutionStrategyDailyData!]!
  userDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserDailyData
  userDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: UserDailyData_orderBy
    orderDirection: OrderDirection
    where: UserDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserDailyData!]!
  royaltyTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RoyaltyTransfer
  royaltyTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: RoyaltyTransfer_orderBy
    orderDirection: OrderDirection
    where: RoyaltyTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RoyaltyTransfer!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
Transaction

"""
type Transaction {
  """ID"""
  id: ID!
  """Date (timestamp)"""
  date: BigInt!
  """Block number"""
  block: BigInt!
  """Collection"""
  collection: Collection!
  """Whether the transaction is a takerAsk"""
  isTakerAsk: Boolean!
  """Execution strategy"""
  strategy: ExecutionStrategy!
  """TokenId"""
  tokenId: BigInt!
  """Price (in ETH)"""
  price: BigDecimal!
  """Maker user"""
  maker: User!
  """Taker user"""
  taker: User!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: Collection_filter
  isTakerAsk: Boolean
  isTakerAsk_not: Boolean
  isTakerAsk_in: [Boolean!]
  isTakerAsk_not_in: [Boolean!]
  strategy: String
  strategy_not: String
  strategy_gt: String
  strategy_lt: String
  strategy_gte: String
  strategy_lte: String
  strategy_in: [String!]
  strategy_not_in: [String!]
  strategy_contains: String
  strategy_contains_nocase: String
  strategy_not_contains: String
  strategy_not_contains_nocase: String
  strategy_starts_with: String
  strategy_starts_with_nocase: String
  strategy_not_starts_with: String
  strategy_not_starts_with_nocase: String
  strategy_ends_with: String
  strategy_ends_with_nocase: String
  strategy_not_ends_with: String
  strategy_not_ends_with_nocase: String
  strategy_: ExecutionStrategy_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  maker: String
  maker_not: String
  maker_gt: String
  maker_lt: String
  maker_gte: String
  maker_lte: String
  maker_in: [String!]
  maker_not_in: [String!]
  maker_contains: String
  maker_contains_nocase: String
  maker_not_contains: String
  maker_not_contains_nocase: String
  maker_starts_with: String
  maker_starts_with_nocase: String
  maker_not_starts_with: String
  maker_not_starts_with_nocase: String
  maker_ends_with: String
  maker_ends_with_nocase: String
  maker_not_ends_with: String
  maker_not_ends_with_nocase: String
  maker_: User_filter
  taker: String
  taker_not: String
  taker_gt: String
  taker_lt: String
  taker_gte: String
  taker_lte: String
  taker_in: [String!]
  taker_not_in: [String!]
  taker_contains: String
  taker_contains_nocase: String
  taker_not_contains: String
  taker_not_contains_nocase: String
  taker_starts_with: String
  taker_starts_with_nocase: String
  taker_not_starts_with: String
  taker_not_starts_with_nocase: String
  taker_ends_with: String
  taker_ends_with_nocase: String
  taker_not_ends_with: String
  taker_not_ends_with_nocase: String
  taker_: User_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Transaction_orderBy {
  id
  date
  block
  collection
  isTakerAsk
  strategy
  tokenId
  price
  maker
  taker
}

"""
User

"""
type User {
  """ID (user address)"""
  id: ID!
  """Total number of transactions"""
  totalTransactions: BigInt!
  """Total ask volume (in ETH)"""
  totalAskVolume: BigDecimal!
  """Total bid volume (in ETH)"""
  totalBidVolume: BigDecimal!
  """Total maker volume (in ETH)"""
  totalMakerVolume: BigDecimal!
  """Total taker volume (in ETH)"""
  totalTakerVolume: BigDecimal!
  """Total volume (in ETH)"""
  totalVolume: BigDecimal!
  """Total royalty collected (in ETH)"""
  totalRoyaltyCollected: BigDecimal!
  """Daily history"""
  dayData(skip: Int = 0, first: Int = 100, orderBy: UserDailyData_orderBy, orderDirection: OrderDirection, where: UserDailyData_filter): [UserDailyData!]!
  """Transactions where user is the maker side"""
  makerTransactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
  """Transactions where user is the taker side"""
  takerTransactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
  """Royalty payments collected by the user (as recipient)"""
  royaltyPayments(skip: Int = 0, first: Int = 100, orderBy: RoyaltyTransfer_orderBy, orderDirection: OrderDirection, where: RoyaltyTransfer_filter): [RoyaltyTransfer!]!
}

"""
UserDailyData

"""
type UserDailyData {
  """ID"""
  id: ID!
  """Start date (timestamp)"""
  date: BigInt!
  """User"""
  user: User!
  """Daily unique transactions"""
  dailyTransactions: BigInt!
  """Daily volume (in ETH)"""
  dailyVolume: BigDecimal!
  """Daily volume (in ETH) excluding zero-fee strategy"""
  dailyVolumeExcludingZeroFee: BigDecimal!
}

input UserDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  dailyTransactions: BigInt
  dailyTransactions_not: BigInt
  dailyTransactions_gt: BigInt
  dailyTransactions_lt: BigInt
  dailyTransactions_gte: BigInt
  dailyTransactions_lte: BigInt
  dailyTransactions_in: [BigInt!]
  dailyTransactions_not_in: [BigInt!]
  dailyVolume: BigDecimal
  dailyVolume_not: BigDecimal
  dailyVolume_gt: BigDecimal
  dailyVolume_lt: BigDecimal
  dailyVolume_gte: BigDecimal
  dailyVolume_lte: BigDecimal
  dailyVolume_in: [BigDecimal!]
  dailyVolume_not_in: [BigDecimal!]
  dailyVolumeExcludingZeroFee: BigDecimal
  dailyVolumeExcludingZeroFee_not: BigDecimal
  dailyVolumeExcludingZeroFee_gt: BigDecimal
  dailyVolumeExcludingZeroFee_lt: BigDecimal
  dailyVolumeExcludingZeroFee_gte: BigDecimal
  dailyVolumeExcludingZeroFee_lte: BigDecimal
  dailyVolumeExcludingZeroFee_in: [BigDecimal!]
  dailyVolumeExcludingZeroFee_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum UserDailyData_orderBy {
  id
  date
  user
  dailyTransactions
  dailyVolume
  dailyVolumeExcludingZeroFee
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalTransactions: BigInt
  totalTransactions_not: BigInt
  totalTransactions_gt: BigInt
  totalTransactions_lt: BigInt
  totalTransactions_gte: BigInt
  totalTransactions_lte: BigInt
  totalTransactions_in: [BigInt!]
  totalTransactions_not_in: [BigInt!]
  totalAskVolume: BigDecimal
  totalAskVolume_not: BigDecimal
  totalAskVolume_gt: BigDecimal
  totalAskVolume_lt: BigDecimal
  totalAskVolume_gte: BigDecimal
  totalAskVolume_lte: BigDecimal
  totalAskVolume_in: [BigDecimal!]
  totalAskVolume_not_in: [BigDecimal!]
  totalBidVolume: BigDecimal
  totalBidVolume_not: BigDecimal
  totalBidVolume_gt: BigDecimal
  totalBidVolume_lt: BigDecimal
  totalBidVolume_gte: BigDecimal
  totalBidVolume_lte: BigDecimal
  totalBidVolume_in: [BigDecimal!]
  totalBidVolume_not_in: [BigDecimal!]
  totalMakerVolume: BigDecimal
  totalMakerVolume_not: BigDecimal
  totalMakerVolume_gt: BigDecimal
  totalMakerVolume_lt: BigDecimal
  totalMakerVolume_gte: BigDecimal
  totalMakerVolume_lte: BigDecimal
  totalMakerVolume_in: [BigDecimal!]
  totalMakerVolume_not_in: [BigDecimal!]
  totalTakerVolume: BigDecimal
  totalTakerVolume_not: BigDecimal
  totalTakerVolume_gt: BigDecimal
  totalTakerVolume_lt: BigDecimal
  totalTakerVolume_gte: BigDecimal
  totalTakerVolume_lte: BigDecimal
  totalTakerVolume_in: [BigDecimal!]
  totalTakerVolume_not_in: [BigDecimal!]
  totalVolume: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_lt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_not_in: [BigDecimal!]
  totalRoyaltyCollected: BigDecimal
  totalRoyaltyCollected_not: BigDecimal
  totalRoyaltyCollected_gt: BigDecimal
  totalRoyaltyCollected_lt: BigDecimal
  totalRoyaltyCollected_gte: BigDecimal
  totalRoyaltyCollected_lte: BigDecimal
  totalRoyaltyCollected_in: [BigDecimal!]
  totalRoyaltyCollected_not_in: [BigDecimal!]
  dayData_: UserDailyData_filter
  makerTransactions_: Transaction_filter
  takerTransactions_: Transaction_filter
  royaltyPayments_: RoyaltyTransfer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum User_orderBy {
  id
  totalTransactions
  totalAskVolume
  totalBidVolume
  totalMakerVolume
  totalTakerVolume
  totalVolume
  totalRoyaltyCollected
  dayData
  makerTransactions
  takerTransactions
  royaltyPayments
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Timestamp of the block if available, format depends on the chain"""
  timestamp: String
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}